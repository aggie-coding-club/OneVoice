import IPython
import matplotlib
import torch
import torchaudio
import sounddevice as sd
from scipy.io.wavfile import write


matplotlib.rcParams["figure.figsize"] = [16.0, 4.8]

torch.random.manual_seed(0)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

print(torch.__version__)
print(torchaudio.__version__)
print(device)
#WE NEED TO PUT PROCESSING AND RECORDING ON DIFFERENT THREADS TO MAKE THEM MORE EFFICENT
#WE ALSO NEED TO PUT THEM IN A WHILE LOOP OR SOME OTHER METHOD TO HAVE AN UNKNOWN LENGTH
fileName = 'speechToText.wav'
rate = 44100
seconds = 30
recording = sd.rec(int(rate*seconds),samplerate=rate,channels=2)
leaving = input("Press enter to stop recording")
sd.wait()
write(fileName,rate,recording) #Return .wav file

SPEECH_URL = fileName
SPEECH_FILE = fileName

#See different pipelines
bundle = torchaudio.pipelines.WAV2VEC2_ASR_BASE_960H

print("Sample Rate:", bundle.sample_rate)

print("Labels:", bundle.get_labels())

model = bundle.get_model().to(device)

print(model.__class__)

IPython.display.Audio(SPEECH_FILE)

waveform, sample_rate = torchaudio.load(SPEECH_FILE)
waveform = waveform.to(device)

if sample_rate != bundle.sample_rate:
    waveform = torchaudio.functional.resample(waveform, sample_rate, bundle.sample_rate)

with torch.inference_mode():
    features, _ = model.extract_features(waveform)

with torch.inference_mode():
    emission, _ = model(waveform)

#Get a new decoder
class GreedyCTCDecoder(torch.nn.Module):
    def __init__(self, labels, blank=0):
        super().__init__()
        self.labels = labels
        self.blank = blank

    def forward(self, emission: torch.Tensor) -> str:
        indices = torch.argmax(emission, dim=-1)  # [num_seq,]
        indices = torch.unique_consecutive(indices, dim=-1)
        indices = [i for i in indices if i != self.blank]
        return "".join([self.labels[i] for i in indices])

decoder = GreedyCTCDecoder(labels=bundle.get_labels())
transcript = decoder(emission[0]).split("|")
transcript = " ".join(transcript)
print(transcript)
IPython.display.Audio(SPEECH_FILE)
